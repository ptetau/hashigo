jQuery.hashigo.js by Patrick Te Tau

Hashigo is spreadsheet style programming on the DOM.
 - You program formulas which are JavaScript with simple tokens for resolving
   DOM elements, e.g. 
   		alert(${.IAmASelector}[0]);
   
 - Tokens resolve to elements via their selectors e.g. ${#mySelector}
 - The result populates the target DOM element
 - The result RECALCULATES with every change (a 'keyup' event) to the 
   referenced element

Usage:
	Evaluate a formula at runtime! This method is tidy and slick.
		$target.calc(formulaString[, options]);
			e.g. $('#a').calc('${#b} + ${#c}');
	
	Specify a function as your formula and manually parse
	your arguments. Ideal for computation involving lot's of elements!
	
		$target.calc(function[, $variableElements, options]);
			e.g. $('#a').calc(function(b,c),[$('#b'),$('#c')]);

Completed:
 - Support for custom event binding methods
  		
 - Further renaming and ordering of methods 
 - High speed formula resolution using Ian Edwards zipper method	
 - High Speed e.g.
	    $('#speed').calc(delta,[$('#distance'),$('#time')]); @done
	    
 - jQuery Chaining e.g. 
		$('#result').calc('${#a}[0] + ${#b}[0]').hide(); @done
		
 - Multiple objects become an array of values 
		${.manyElementsWithValues} => [12,13,11,10] @done
		
 - Operate on all element types not just inputs @done
 
 - Evaluate selectors beginning in '#' or ending in ':eq(n)' as single values
   and not arrays with a single element, e.g.
   		Given a DOM like the following:
   			<span id='an'>example</span>
   		${#an} resolves to ['example']
		And a DOM like the following:
   			<a>so</a><a>many</a><a>anchors</a>
   		${a:eq(2)} resolves to 'anchors'
		
TODO:   		 		
 - Add support for multiple events at fired at once, e.g.
 		{events : ['blur', 'change', 'keyup']}

 - Complete test coverage with fireunit or similar	
 - Code re-organisation, make more logical and modular, jslint @ongoing
 - Renaissance Stonecutter Scotch Ale @ongoing
